{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/metronome/services/metronome.worker.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/metronome/components/metronome.component.ts","webpack:///src/app/metronome/components/metronome.component.html","webpack:///src/app/metronome/metronome-routing.module.ts","webpack:///src/app/metronome/metronome.module.ts","webpack:///src/app/metronome/models/metronome-player.ts","webpack:///src/app/metronome/models/player-state-enum.ts","webpack:///src/app/metronome/services/metronome-audio.service.ts","webpack:///src/app/metronome/services/time-sync.service.ts","webpack:///src/app/tuner/components/tuner.component.ts","webpack:///src/app/tuner/components/tuner.component.html","webpack:///src/app/tuner/tuner-routing.module.ts","webpack:///src/app/tuner/tuner.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///ws (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","loadChildren","m","MetronomeModule","TunerModule","DroneModule","AppRoutingModule","forRoot","imports","AppComponent","router","title","activeLinkIndex","navLinks","label","link","index","events","subscribe","res","indexOf","find","tab","url","selector","templateUrl","styleUrls","AppModule","iconRegistry","setDefaultFontSetClass","declarations","providers","bootstrap","MetronomeComponent","timeSyncService","metronomeAudio","ngUnsubscribe","playerState","clientCount","init","subscribeNextBeat","pipe","nextBeat","nextBeatReceived","subscribeClientCount","count","isPlaying","play","state","Paused","next","complete","data","console","log","tempo","timeDifference","Date","now","rate","setTimeout","playBeat","firstPlay","requestNextBeat","Waiting","Playing","syncDevices","requestNewTempo","toggleResolution","sync","sendTempo","emitPlay","component","MetronomeRoutingModule","forChild","socketConfig","options","MetronomePlayer","PlayerState","MetronomeAudioService","audioContext","unlocked","lookahead","soundFrequency","scheduleAheadTime","nextNoteTime","noteResolution","noteLength","notesInQueue","notePartition","secondsPerBeat","current16thNote","beatNumber","time","push","note","osc","createOscillator","connect","destination","frequency","value","start","stop","incrementPartition","currentTime","scheduleNote","nextNote","buffer","createBuffer","node","createBufferSource","timerWorker","postMessage","Worker","onmessage","scheduler","providedIn","TimeSyncService","socket","fromEvent","emit","newTempo","TunerComponent","domSanitizer","recording","blobUrl","bypassSecurityTrustUrl","mediaConstraints","video","audio","navigator","mediaDevices","getUserMedia","successCallback","bind","errorCallback","stream","mimeType","numberOfAudioChannels","sampleRate","StereoAudioRecorder","record","processRecording","blob","URL","createObjectURL","error","TunerRoutingModule","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = __webpack_public_path__ + \"0-es2015.worker.js\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: 'metronome', loadChildren: () => import('./metronome/metronome.module').then(m => m.MetronomeModule) },\n  { path: 'tuner', loadChildren: () => import('./tuner/tuner.module').then(m => m.TunerModule) },\n  { path: 'drone', loadChildren: () => import('./drone/drone.module').then(m => m.DroneModule) },\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { } ","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  \n  title = 'practice-app';\n  navLinks: any[];\n  activeLinkIndex = -1; \n  constructor(private router: Router) {\n    this.navLinks = [\n      {\n        label: 'Metronome',\n        link: '/metronome',\n        index: 0\n      }, {\n        label: 'Drone',\n        link: '/drone',\n        index: 1\n      }, {\n        label: 'Tuner',\n        link: '/tuner',\n        index: 2\n      }, \n    ];\n  }\n  ngOnInit(): void {\n    this.router.events.subscribe((res) => {\n        this.activeLinkIndex = this.navLinks.indexOf(this.navLinks.find(tab => tab.link === '.' + this.router.url));\n    });\n  }\n}\n","<nav mat-tab-nav-bar>\n    <a mat-tab-link\n        *ngFor=\"let link of navLinks\"\n        [routerLink]=\"link.link\"\n        routerLinkActive #rla=\"routerLinkActive\"\n        [active]=\"rla.isActive\"> {{ link.label }}\n    </a>\n</nav>\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatIconRegistry } from '@angular/material/icon';\n\n// Custom components\nimport { AppComponent } from './app.component';\n\n// Custom modules\nimport { AppRoutingModule } from './app-routing.module';\nimport { MetronomeModule } from './metronome/metronome.module';\nimport { TunerModule } from './tuner/tuner.module';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    MetronomeModule,\n    TunerModule,\n    BrowserAnimationsModule,\n    MatTabsModule\n  ],\n  exports: [],\n  providers: [],\n  bootstrap: [AppComponent],\n  \n})\nexport class AppModule {\n  constructor(iconRegistry: MatIconRegistry) {\n    iconRegistry.setDefaultFontSetClass('material-icons-round');\n  }\n }\n","import { Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n// Custom imports\nimport { TimeSyncService } from '../services/time-sync.service'\nimport { NextBeat } from '../models/next-beat'\nimport { MetronomeAudioService } from '../services/metronome-audio.service';\nimport { MetronomePlayer } from '../models/metronome-player';\nimport { PlayerState } from '../models/player-state-enum'\n\n@Component({\n  selector: 'app-metronome',\n  templateUrl: './metronome.component.html',\n  styleUrls: ['./metronome.component.scss']\n})\n\nexport class MetronomeComponent implements OnInit {\n  // Variables\n  private ngUnsubscribe = new Subject();\n  playerState:MetronomePlayer = new MetronomePlayer();\n  clientCount:number = 1;\n\n  constructor(\n    private timeSyncService:TimeSyncService,\n    public metronomeAudio:MetronomeAudioService\n  ) {}\n\n  ngOnInit(): void {\n    this.metronomeAudio.init();\n    this.timeSyncService.subscribeNextBeat().pipe(takeUntil(this.ngUnsubscribe)).subscribe(nextBeat => this.nextBeatReceived(nextBeat));\n    this.timeSyncService.subscribeClientCount().pipe(takeUntil(this.ngUnsubscribe)).subscribe(clientCount => this.clientCount = clientCount.count)\n  }\n\n  ngOnDestroy() {\n    if (this.metronomeAudio.isPlaying){\n      this.metronomeAudio.play()\n      this.playerState.state = PlayerState.Paused;\n    }\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n\n  nextBeatReceived(data:NextBeat){\n    console.log(data)\n    this.playerState.tempo = this.metronomeAudio.tempo = data.tempo\n    if (this.playerState.state == PlayerState.Paused){\n      return;\n    }\n    var nextBeat = data.nextBeat\n    var timeDifference = nextBeat - Date.now();\n    while (timeDifference < 1){\n      nextBeat+=this.playerState.rate;\n      timeDifference = nextBeat - Date.now();\n    }\n\n    setTimeout(()=>{\n      this.metronomeAudio.play();\n      if (!this.metronomeAudio.isPlaying){\n        this.playBeat()\n      }\n    }, timeDifference);\n  }\n\n  // Media client handlers\n  emitPlay(){\n    // Activate playing onclick, necessary for browsers\n    if (this.playerState.firstPlay){\n      this.metronomeAudio.play()\n      this.metronomeAudio.play()\n      this.playerState.firstPlay = false;\n    }\n\n    // Request next beat from server\n    if(!this.metronomeAudio.isPlaying){\n      this.timeSyncService.requestNextBeat();\n      this.playerState.state = PlayerState.Waiting;\n    } else{\n      this.playBeat() // Toggle play button\n    }\n  }\n\n  playBeat(){\n    this.metronomeAudio.play()\n    if (this.metronomeAudio.isPlaying){\n      this.playerState.state = PlayerState.Playing;\n    } else {\n      this.playerState.state = PlayerState.Paused;\n    }\n  }\n\n  sync(){\n    this.timeSyncService.syncDevices();\n  }\n\n  sendTempo(){\n    console.log(\"sendTempo\")\n    this.timeSyncService.requestNewTempo(this.playerState.tempo)\n  }\n\n  toggleResolution(){\n    console.log(\"toggle resolution\")\n    this.metronomeAudio.toggleResolution();\n  }\n\n}\n","<div id=\"screen\">\n    <!-- Sync button -->\n    <div id=\"sync\">\n        <img id=\"sync-button\" src=\"/assets/images/sync.png\" (click)=\"sync();\" type=\"button\"/>\n    </div>\n\n    <!-- Active client count -->\n    <div id=\"clients\">\n        <span id=\"online-icon\"></span>\n        <span id=\"client-count\">{{ this.clientCount }}</span> PLAYERS ONLINE\n    </div>\n\n    <!-- Display BPM -->\n    <div id=\"display-box\">\n        <p id=\"tempo-display\">{{ this.playerState.tempo }}</p>\n    </div>\n\n    <!-- Blink on beat -->\n    <div id=\"blinkers\" (click)=\"toggleResolution();\">\n        <div id=\"blink-0\" class=\"blink\" [ngClass]=\"{'makeBlink':this.metronomeAudio.notePartition == 0}\"></div>\n        <div id=\"blink-1\" class=\"blink\" [ngClass]=\"{'makeBlink':this.metronomeAudio.notePartition == 1}\"></div>\n        <div id=\"blink-2\" class=\"blink\" [ngClass]=\"{'makeBlink':this.metronomeAudio.notePartition == 2}\"></div>\n        <div id=\"blink-3\" class=\"blink\" [ngClass]=\"{'makeBlink':this.metronomeAudio.notePartition == 3}\"></div>\n    </div>\n\n     <!-- Tempo -->\n    <div id=\"tempo-box\">\n        <input id=\"tempo-scroll\" type=\"range\" min=\"35.0\" max=\"270.0\" step=\"1\" [value]=\"this.playerState.tempo\" (input)=\"playerState.tempo=$event.target.value;\">\n        <br/>\n        <button [disabled]=\"this.playerState.tempo == this.metronomeAudio.tempo\" id=\"tempo-update-button\" type=\"button\" (click)=\"sendTempo();\">Update BPM</button>\n    </div>\n\n    <!-- Media buttons -->\n    <div id=\"media-buttons\">\n        <!-- <img id=\"tempo-change-button\" src=\"/assets/images/minus.png\" (click)=\"this.playerState.tempo=this.playerState.tempo-1\" type=\"button\"/> -->\n        <button mat-icon-button id=\"tempo-change-button\" (click)=\"this.playerState.tempo=this.playerState.tempo-1\" aria-label=\"Decrease tempo\">\n            <mat-icon id=\"tempo-icon\" inline=\"true\">remove</mat-icon>\n        </button>\n        <!-- <img id=\"play-button\" [src]=\"playerState.state == 2 ? '/assets/images/play.png' : '/assets/images/pause.png'\" (click)=\"emitPlay();\" type=\"button\"/> -->\n        <button mat-fab (click)=\"emitPlay();\" id=\"play-button\" aria-label=\"Play metronome\">\n            <mat-icon id=\"play-icon\" inline=\"true\" >{{playerState.state == 2 ? \"play_arrow\" : \"pause\"}}</mat-icon>\n        </button>\n        <button mat-icon-button id=\"tempo-change-button\" (click)=\"this.playerState.tempo=this.playerState.tempo-1+2\" aria-label=\"Increase tempo\">\n            <mat-icon id=\"tempo-icon\" inline=\"true\" >add</mat-icon>\n        </button>\n    </div>\n\n</div> \n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { MetronomeComponent } from './components/metronome.component';\n\nconst routes: Routes = [{ path: '', component: MetronomeComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class MetronomeRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\n// External libraries\nimport { SocketIoModule, SocketIoConfig } from 'ngx-socket-io';\nimport { AudioContextModule } from 'angular-audio-context';\n\n// Custom components\nimport { MetronomeRoutingModule } from './metronome-routing.module';\nimport { MetronomeComponent } from './components/metronome.component';\n\nconst socketConfig: SocketIoConfig = { url: 'https://kallis-practice.herokuapp.com', options: {} };\n\n@NgModule({\n  declarations: [MetronomeComponent],\n  imports: [\n    CommonModule,\n    MetronomeRoutingModule,\n    SocketIoModule.forRoot(socketConfig),\n    AudioContextModule.forRoot('balanced'),\n    MatButtonModule,\n    MatIconModule\n  ]\n})\nexport class MetronomeModule { }\n","import { PlayerState } from './player-state-enum'\n \nexport class MetronomePlayer {\n    tempo:number = 120;\n    rate:number = 60000/this.tempo;\n    playInterval:number;\n    firstPlay:boolean = true;\n    state:PlayerState = PlayerState.Paused;\n}\n","export enum PlayerState {\n    Waiting,\n    Playing,\n    Paused\n}","import { Injectable, OnInit } from '@angular/core';\nimport { AudioContext } from 'angular-audio-context';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class MetronomeAudioService{\n\n  constructor(private audioContext: AudioContext) {}\n\n  unlocked:boolean = false;\n  isPlaying:boolean = false;\n  startTime:number;              // The start time of the entire sequence.\n  current16thNote:number;        // What note is currently last scheduled?\n  tempo:number = 120.0;          // tempo (in beats per minute)\n  lookahead:number = 25.0;       // How frequently to call scheduling function\n  soundFrequency:number = 880.0;\n  scheduleAheadTime:number = 0.1;// How far ahead to schedule audio (sec) with next interval (in case the timer is late)\n  nextNoteTime:number = 0.0;     // when the next note is due.\n  noteResolution:number = 2;     // 0 == 16th, 1 == 8th, 2 == quarter note\n  noteLength:number = 0.05;      // length of \"beep\" (in seconds)\n  notesInQueue = [];             // the notes that have been put into the web audio, and may or may not have played yet. {note, time}\n  timerWorker:Worker;          \n  notePartition:number = -1;\n\n  updateTempo(tempo:number){\n    this.tempo = 120.0;\n  }\n  \n  nextNote() {\n      // Advance current note and time by a 16th note...\n      let secondsPerBeat:number = 60.0 / this.tempo;    // Notice this picks up the CURRENT\n                                            // tempo value to calculate beat length.\n      this.nextNoteTime += 0.25 * secondsPerBeat;    // Add beat length to last beat time\n\n      this.current16thNote++;    // Advance the beat number, wrap to zero\n      if (this.current16thNote == 16) {\n          this.current16thNote = 0;\n      }\n  }\n\n  toggleResolution(){\n    this.noteResolution = (this.noteResolution+1)%3;\n  }\n\n  incrementPartition(){\n    if(this.current16thNote%4 == 0){\n      this.notePartition = (this.current16thNote)/4;\n    }\n  }\n\n  scheduleNote(beatNumber, time) {\n      // push the note on the queue, even if we're not playing.\n      this.notesInQueue.push( { note: beatNumber, time: time } );\n\n      if ( (this.noteResolution==1) && (beatNumber%2))\n          return; // we're not playing non-8th 16th notes\n      if ( (this.noteResolution==2) && (beatNumber%4))\n          return; // we're not playing non-quarter 8th notes\n\n      // create an oscillator\n      let osc = this.audioContext.createOscillator();\n      osc.connect( this.audioContext.destination );\n      // if (beatNumber % 16 === 0)    // beat 0 == high pitch\n      //     osc.frequency.value = 880.0;\n      if (beatNumber % 4 === 0 )    // quarter notes = medium pitch\n          osc.frequency.value = this.soundFrequency\n      else                        // other 16th notes = low pitch\n          osc.frequency.value = this.soundFrequency/2;\n      osc.start( time );\n      osc.stop( time + this.noteLength );\n      this.incrementPartition();\n  }\n\n  scheduler() {\n      // while there are notes that will need to play before the next interval,\n      // schedule them and advance the pointer.\n      while (this.nextNoteTime < this.audioContext.currentTime + this.scheduleAheadTime ) {\n          this.scheduleNote( this.current16thNote, this.nextNoteTime );\n          this.nextNote();\n      }\n  }\n\n  play() {\n    if (!this.unlocked) {\n      // play silent buffer to unlock the audio\n      let buffer = this.audioContext.createBuffer(1, 1, 22050);\n      let node = this.audioContext.createBufferSource();\n      node.buffer = buffer;\n      node.start(0);\n      this.unlocked = true;\n    }\n\n    this.isPlaying = !this.isPlaying;\n\n    if (this.isPlaying) { // start playing\n        this.current16thNote = 0;\n        this.nextNoteTime = this.audioContext.currentTime;\n        this.timerWorker.postMessage(\"start\");\n        return false;\n    } else {\n        this.timerWorker.postMessage(\"stop\");\n        return true;\n    }\n  }\n\n  init(){\n    // NOTE: THIS RELIES ON THE MONKEYPATCH LIBRARY BEING LOADED FROM\n    // Http://cwilso.github.io/AudioContext-MonkeyPatch/AudioContextMonkeyPatch.js\n    // TO WORK ON CURRENT CHROME!!  But this means our code can be properly\n    // spec-compliant, and work on Chrome, Safari and Firefox.\n    // if we wanted to load audio files, etc., this is where we should do it.\n\n    this.timerWorker = new Worker('./metronome.worker.ts', { type: 'module' });\n    this.timerWorker.onmessage = ({ data }) => {\n      if (data == \"tick\") {\n        this.scheduler();\n      }\n      else{\n        console.log(\"message: \" + data);\n      }\n    };\n    this.timerWorker.postMessage({\"interval\":this.lookahead});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Socket } from 'ngx-socket-io';\nimport { Observable } from 'rxjs';\nimport { NextBeat } from '../models/next-beat';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TimeSyncService {\n  constructor(private socket:Socket) { }\n\n  // Important setup function to listen for next beat\n  subscribeNextBeat():Observable<NextBeat>{\n    return this.socket.fromEvent('nextBeatSent');\n  }\n\n  subscribeClientCount():Observable<any>{\n    return this.socket.fromEvent('clientCount');\n  }\n\n  requestNextBeat():void{\n    this.socket.emit('requestNextBeat');\n  }\n\n  requestNewTempo(newTempo:number):void{\n    this.socket.emit('requestNewTempo', {tempo:newTempo});\n  }\n\n  syncDevices():void{\n    this.socket.emit('syncDevices');\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\ndeclare var $: any;\nimport * as RecordRTC from 'recordrtc';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n\n@Component({\n  selector: 'app-tuner',\n  templateUrl: './tuner.component.html',\n  styleUrls: ['./tuner.component.scss']\n})\nexport class TunerComponent {\n  title = 'micRecorder';\n  //Lets declare Record OBJ\n  record;\n  //Will use this flag for toggeling recording\n  recording = false;\n  //URL of Blob\n  blobUrl;\n  error;\n  constructor(private domSanitizer: DomSanitizer) {}\n\n  sanitize(blobUrl: string) {\n    return this.domSanitizer.bypassSecurityTrustUrl(blobUrl);\n  }\n  /**\n  * Start recording.\n  */\n  initiateRecording() {\n    this.recording = true;\n    let mediaConstraints = {\n    video: false,\n    audio: true\n    };\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(this.successCallback.bind(this), this.errorCallback.bind(this));\n  }\n  /**\n  * Will be called automatically.\n  */\n  successCallback(stream) {\n    var options = {\n    mimeType: \"audio/wav\",\n    numberOfAudioChannels: 1,\n    sampleRate: 16000,\n    };\n    //Start Actuall Recording\n    var StereoAudioRecorder = RecordRTC.StereoAudioRecorder;\n    this.record = new StereoAudioRecorder(stream, options);\n    this.record.record();\n  }\n  /**\n  * Stop recording.\n  */\n  stopRecording() {\n  this.recording = false;\n  this.record.stop(this.processRecording.bind(this));\n  }\n  /**\n  * processRecording Do what ever you want with blob\n  * @param  {any} blob Blog\n  */\n  processRecording(blob) {\n    this.blobUrl = URL.createObjectURL(blob);\n    console.log(\"blob\", blob);\n    console.log(\"blobUrl\", this.blobUrl);\n  }\n  /**\n  * Process Error.\n  */\n  errorCallback(error) {\n    this.error = 'Can not play audio in your browser';\n  }\n  ngOnInit() {\n\n  }\n  }","<div >\n  <button (click)=\"initiateRecording()\" class=\"btn btn-primary\" *ngIf=\"!recording\" > Start Recording </button>\n  <button (click)=\"stopRecording()\" class=\"btn btn-danger\" *ngIf=\"recording\"> Stop Recording </button>\n  <audio controls=\"\" *ngIf=\"blobUrl\">\n  <source [src]=\"sanitize(blobUrl)\" type=\"audio/wav\">\n  </audio>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TunerComponent } from './components/tuner.component';\n\nconst routes: Routes = [{ path: '', component: TunerComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TunerRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TunerRoutingModule } from './tuner-routing.module';\nimport { TunerComponent } from './components/tuner.component';\n\n\n@NgModule({\n  declarations: [TunerComponent],\n  imports: [\n    CommonModule,\n    TunerRoutingModule\n  ]\n})\nexport class TunerModule { }","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"]}